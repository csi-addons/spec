// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package healer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealerNodeClient is the client API for HealerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealerNodeClient interface {
	// NodeHealer is a procedure that gets called on the CSI NodePlugin.
	NodeHealer(ctx context.Context, in *NodeHealerRequest, opts ...grpc.CallOption) (*NodeHealerResponse, error)
}

type healerNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewHealerNodeClient(cc grpc.ClientConnInterface) HealerNodeClient {
	return &healerNodeClient{cc}
}

func (c *healerNodeClient) NodeHealer(ctx context.Context, in *NodeHealerRequest, opts ...grpc.CallOption) (*NodeHealerResponse, error) {
	out := new(NodeHealerResponse)
	err := c.cc.Invoke(ctx, "/healer.HealerNode/NodeHealer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealerNodeServer is the server API for HealerNode service.
// All implementations must embed UnimplementedHealerNodeServer
// for forward compatibility
type HealerNodeServer interface {
	// NodeHealer is a procedure that gets called on the CSI NodePlugin.
	NodeHealer(context.Context, *NodeHealerRequest) (*NodeHealerResponse, error)
	mustEmbedUnimplementedHealerNodeServer()
}

// UnimplementedHealerNodeServer must be embedded to have forward compatible implementations.
type UnimplementedHealerNodeServer struct {
}

func (UnimplementedHealerNodeServer) NodeHealer(context.Context, *NodeHealerRequest) (*NodeHealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHealer not implemented")
}
func (UnimplementedHealerNodeServer) mustEmbedUnimplementedHealerNodeServer() {}

// UnsafeHealerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealerNodeServer will
// result in compilation errors.
type UnsafeHealerNodeServer interface {
	mustEmbedUnimplementedHealerNodeServer()
}

func RegisterHealerNodeServer(s grpc.ServiceRegistrar, srv HealerNodeServer) {
	s.RegisterService(&HealerNode_ServiceDesc, srv)
}

func _HealerNode_NodeHealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealerNodeServer).NodeHealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healer.HealerNode/NodeHealer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealerNodeServer).NodeHealer(ctx, req.(*NodeHealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealerNode_ServiceDesc is the grpc.ServiceDesc for HealerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "healer.HealerNode",
	HandlerType: (*HealerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeHealer",
			Handler:    _HealerNode_NodeHealer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healer/healer.proto",
}
