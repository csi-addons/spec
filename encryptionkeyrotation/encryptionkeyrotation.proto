// Code generated by make; DO NOT EDIT.
syntax = "proto3";
package encryptionkeyrotation;

import "github.com/container-storage-interface/spec/lib/go/csi/csi.proto";
import "google/protobuf/descriptor.proto";

option go_package = "github.com/csi-addons/spec/lib/go/encryptionkeyrotation";

// EncryptionKeyRotationController holds the RPC method for running
// key rotation operation on the volume.
service EncryptionKeyRotationController {
  // EncryptionKeyRotate is a procedure that is called
  // on the CSI ControllerPlugin or NodePlugin
  rpc EncryptionKeyRotate(EncryptionKeyRotateRequest)
  returns (EncryptionKeyRotateResponse){}
}
// EncryptionKeyRotateRequest contains the information needed to identify
// the volume by the SP and access any backend services so that the key can be
// rotated.
message EncryptionKeyRotateRequest {
  // The ID of the volume for which the key is to be rotated.
  // This field is required
  string volume_id = 1;

  // The path where the volume is available.
  // This field is OPTIONAL
  // Useful if you are implementing the RPC on CSI Driver NodePlugin
  string volume_path = 2;

  // Provide the encryption key to be set
  // This field is OPTIONAL
  string encryption_key = 3 [(csi.v1.csi_secret) = true];

  // Plugin specific parameters passed in as opaque key-value pairs.
  map<string, string> parameters = 4;

  // Secrets required by the plugin to complete the request.
  map<string, string> secrets = 5 [(csi.v1.csi_secret) = true];

  // Volume capability describing how the CO intends to use this volume.
  // This allows SP to determine if volume is being used as a block
  // device or mounted file system. This is OPTIONAL.
  csi.v1.VolumeCapability volume_capability = 6;
}
// EncryptionKeyRotateResponse holds the information about the result of the
// EncryptionKeyRotateRequest call.
message EncryptionKeyRotateResponse {

}
