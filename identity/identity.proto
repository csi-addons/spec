// Code generated by make; DO NOT EDIT.
syntax = "proto3";
package identity;

import "google/protobuf/wrappers.proto"; // for BoolValue in ProbeResponse

option go_package = ".;identity";

// Identity is the service that CSI-drivers MUST implement in order to be
// compatible with CSI-Addons specification. It provides the basic details that
// are needed by the CSI-Addons CO plugin to communicate with the CSI-driver
// and detects its supported features.
service Identity {
  // GetIdentity returns basic information about the side-car and CSI-driver.
  rpc GetIdentity(GetIdentityRequest)
  returns (GetIdentityResponse) {}

  // GetCapabilities returns the capabilities that the CSI-driver supports.
  rpc GetCapabilities(GetCapabilitiesRequest)
  returns (GetCapabilitiesResponse) {}

  // Probe is called by the CO plugin to validate that the CSI-Addons Node is
  // still healthy.
  rpc Probe(ProbeRequest)
  returns (ProbeResponse) {}
}
// GetIdentityRequest is sent by the CSI-Addons CO plugin to obtain the
// drivername, version and optional details from the CSI-driver.
message GetIdentityRequest {
  // Intentionally empty.
}

// GetIdentityResponse is returned by the CSI-driver as a response to a
// GetIdentityRequest.
message GetIdentityResponse {
  // The name MUST follow domain name notation format
  // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD include
  // the CSI-drivers's host company name and the CSI-driver name, to minimize
  // the possibility of collisions. It MUST be 63 characters or less, beginning
  // and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-),
  // dots (.), and alphanumerics between. This field is REQUIRED.
  string name = 1;
  // This field is REQUIRED. Value of this field is opaque to the CO.
  string vendor_version = 2;
  // This field is OPTIONAL. Values are opaque to the CO.
  map<string, string> manifest = 3;
}
// GetCapabilitiesRequest is sent by the CSI-Addons CO plugin to detect the
// features that a CSI-driver supports.
message GetCapabilitiesRequest {
  // Intentionally empty.
}

// GetCapabilitiesResponse is returned by the CSI-driver as a response to a
// GetCapabilitiesRequest.
message GetCapabilitiesResponse {
  // All the capabilities that the controller service supports. This
  // field is OPTIONAL.
  repeated Capability capabilities = 1;
}

// Specifies one or more capabilities of the CSI-driver.
message Capability {
  // Service contains the type of CSI Service that the CSI-driver provides.
  message Service {
    // Type describes a CSI Service that CSI-drivers can support.
    enum Type {
      // UNKNOWN indicates that the CSI-driver does not neither provide the CSI
      // ControllerService or CSI NodeService. The CSI-Addons CO plugin will
      // most likely ignore the node providing this Identity Service.
      UNKNOWN = 0;

      // CONTROLLER_SERVICE indicates that the CSI-driver provides RPCs for the
      // CSI ControllerService.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      CONTROLLER_SERVICE = 1;

      // NODE_SERVICE indicates that the CSI-driver provides RPCs for the CSI
      // NodeService.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require a volume to be staged/attached to
      // the node.
      NODE_SERVICE = 2;
    }
    // type contains the Type of CSI Service that the CSI-driver supports.
    Type type = 1;
  }

  // ReclaimSpace contains the features of the ReclaimSpace operation that the
  // CSI-driver supports.
  message ReclaimSpace {
    // Type describes a CSI Service that CSI-drivers can support.
    enum Type {
      // UNKNOWN indicates that the CSI-driver does not support the ReclaimSpace
      // operation in the current mode. The CSI-driver may be able to support
      // the operation when is it configured differently. The CSI-Addons CO
      // plugin will most likely ignore this node for the ReclaimSpace
      // operation.
      UNKNOWN = 0;

      // OFFLINE indicates that the CSI-driver provides RPCs for an offline
      // ReclaimSpace operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      OFFLINE = 1;

      // ONLINE indicates that the CSI-driver provides RPCs for an online
      // ReclaimSpace operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require a volume to be staged/attached to
      // the node.
      ONLINE = 2;
    }
    // type contains the Type of CSI Service that the CSI-driver supports.
    Type type = 1;
  }

  // NetworkFence contains the features of the NetworkFence operation that the
  // CSI-driver supports.
  message NetworkFence {
    // Type describes a CSI Service that CSI-drivers can support.
    enum Type {
      // UNKNOWN indicates that the CSI-driver does not support the NetworkFence
      // operation in the current mode. The CSI-Addons CO plugin will most
      // likely ignore this node for the NetworkFence operation.
      UNKNOWN = 0;

      // NETWORK_FENCE indicates that the CSI-driver provides RPCs for a
      // NetworkFence operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      NETWORK_FENCE = 1;

      // GET_CLIENTS_TO_FENCE indicates that the CSI-driver provides RPCs for a
      // GET_CLIENTS_TO_FENCE operation to get the clients to fence.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      GET_CLIENTS_TO_FENCE = 2;
    }
    // type contains the Type of CSI Service that the CSI-driver supports.
    Type type = 1;
  }

  // VolumeReplication contains the features of the volumereplication operation
  // that the CSI-driver supports.
  message VolumeReplication {
    // Type describes a CSI Service that CSI-drivers can support.
    enum Type {
      // UNKNOWN indicates that the CSI-driver does not support the
      // VolumeReplication operation in the current mode. The CSI-Addons CO
      // plugin will most likely ignore this node for the
      // VolumeReplication operation.
      UNKNOWN = 0;

      // VOLUME_REPLICATION indicates that the CSI-driver provides RPCs for a
      // VolumeReplication operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      VOLUME_REPLICATION = 1;
    }
    // type contains the Type of CSI Service that the CSI-driver supports.
    Type type = 1;
  }

  // VolumeGroup contains the features of the volumegroup operation
  // that the CSI-driver supports.
  message VolumeGroup {
    // Type describes a CSI Service that CSI-drivers can support.
    enum Type {
      // UNKNOWN indicates that the CSI-driver does not support the
      // VolumeGroup operation in the current mode. The CSI-Addons CO
      // plugin will most likely ignore this node for the
      // VolumeGroup operation.
      UNKNOWN = 0;

      // VOLUME_GROUP indicates that the CSI-driver provides RPCs for a
      // VolumeGroup operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs that require access to the storage system,
      // similar to the CSI Controller (provisioner).
      VOLUME_GROUP = 1;
      // LIMIT_VOLUME_TO_ONE_VOLUME_GROUP indicates that the CSI-driver
      // does not support that one volume will be in multiple VGs,
      // so it can be in only one VG.
      LIMIT_VOLUME_TO_ONE_VOLUME_GROUP = 2;
      // DO_NOT_ALLOW_VG_TO_DELETE_VOLUMES indicates that the CSI-driver
      // does not support that deletion of the VG
      // won't delete the volumes under it.
      DO_NOT_ALLOW_VG_TO_DELETE_VOLUMES = 3;
      // MODIFY_VOLUME_GROUP indicates that the CSI-driver
      // supports that modifying the VG.
      MODIFY_VOLUME_GROUP = 4;
      // GET_VOLUME_GROUP indicates that the CSI-driver
      // supports getting the VG.
      GET_VOLUME_GROUP = 5;
      // LIST_VOLUME_GROUPS indicates that the CSI-driver
      // supports listing the VGs.
      LIST_VOLUME_GROUPS = 6;
    }
    // type contains the Type of CSI Service that the CSI-driver supports.
    Type type = 1;
  }

  // EncryptionKeyRotation contains the features of the EncryptionKeyRotation
  // operation that the CSI driver supports.
  message EncryptionKeyRotation {
    // Type describes a CSI Encryption Service that CSI driver can support.
    enum Type {
      // UNKNOWN indicates that the CSI driver does not support the
      // EncryptionKeyRotation operation in the current mode.
      // The CSI-Addons CO plugin will most likely ignore this node
      // for the EncryptionKeyRotation operation.
      UNKNOWN = 0;
      // ENCRYPTIONKEYROTATION indicates that the CSI driver provides
      // RPCs for an EncryptionKeyRotation operation.
      // The presence of this capability determines whether the CSI-Addons CO
      // plugin can invoke RPCs for rotating the encryption key.
      ENCRYPTIONKEYROTATION = 1;
    }
    // type contains the Type of CSI Service that the CSI driver supports.
    Type type = 1;
  }

  // Additional CSI-Addons operations will need to be added here.

  oneof type {
    // Service or operation that the CSI-driver supports.
    Service service = 1;
    // ReclaimSpace operation capabilities.
    ReclaimSpace reclaim_space = 2;
    // NetworkFence operation capabilities
    NetworkFence network_fence = 3;
    // VolumeReplication operation capabilities.
    VolumeReplication volume_replication = 4;
    // VolumeGroup operation capabilities.
    VolumeGroup volume_group = 5;
    // EncryptionKeyRotation operation capabilities.
    EncryptionKeyRotation encryption_key_rotation = 6;

    // Additional CSI-Addons operations need to be appended to this list.
  }
}
// ProbeRequest is sent to the CSI-driver to confirm that it can respond to
// requests from the CSI-Addons CO plugin.
message ProbeRequest {
  // Intentionally empty.
}

// ProbeResponse is returned by the CSI-driver as a response to a ProbeRequest.
message ProbeResponse {
  // Readiness allows a CSI-driver to report its initialization status back
  // to the CSI-Addons CO plugin. Initialization for some CSI-drivers MAY be
  // time consuming and it is important for a CO to distinguish between the
  // following cases:
  //
  // 1) The CSI-driver is in an unhealthy state and MAY need restarting. In
  //    this case a gRPC error code SHALL be returned.
  // 2) The CSI-driver is still initializing, but is otherwise perfectly
  //    healthy. In this case a successful response SHALL be returned
  //    with a readiness value of `false`. Calls to the CSI-driver's
  //    Controller and/or Node services MAY fail due to an incomplete
  //    initialization state.
  // 3) The CSI-driver has finished initializing and is ready to service
  //    calls to its Controller and/or Node services. A successful
  //    response is returned with a readiness value of `true`.
  //
  // This field is OPTIONAL. If not present, the caller SHALL assume
  // that the CSI-driver is in a ready state and is accepting calls to its
  // Controller and/or Node services (according to the CSI-driver's reported
  // capabilities).
  .google.protobuf.BoolValue ready = 1;
}
